<template>
	<div class="container-fluid">	
		<div class="row">
			<div class="col-lg-4  mx-auto">
				<div class="card">
					<h2 class="card-title mx-auto">
						{{ $t('title') }}
					</h2>
					<div class="card-body">
						<form @submit.prevent="submit" role="form" class="form">
						<div class="form-group">
							<label for="email">{{ $t('email') }}</label>
							<input
								type="email"
								class="form-control"
								:class="{'is-invalid' : error.email}"
								id="email"
								v-model="form.email"
								autocomplete="off"
								:disabled="loading"
							/>
							<div class="invalid-feedback" v-show="error.email">{{ error.email }}</div>
						</div>
						<div class="form-group mx-auto">
							<button type="submit" class="btn btn-primary btn-lg btn-block" :class="{ 'btn-loading': loading }" :disabled="loading">{{ $t('submit') }}</button>
						</div>
					</form>
					</div>
				</div>
			</div>
		</div>
	</div>
</template>

<script>
	import {api} from "../../config";

	export default {
		i18n: {
			messages: {
				en: { 
					"title": "Restore password",
					"submit": "Send",
					"done": "Reset password link sending to {email}",
				},
				ru: {
					"title": "Восстановление пароля",
					"submit": "Отослать",
					"done": "Ссылка на изменения пароля отослана на {email}",
				}
			}
		},
		computed: {
			meta_title: function() {
				return this.$t('title');
			},
		},
		metaInfo () {
			return {
				title: this.meta_title,
			}
		},
		data() {
			return {
				loading: false,
				form: {
					email: null,
				},
				error: {
					email: null,
				}
			}
		},
		methods: {
		    async submit() {
				this.loading = true;

				try {
					const res = await axios.post(api.passwordSendEmail, this.form)

					this.clearErrors()
					
					this.loading = false;
					
					this.$noty.success(this.$t('done', {email: this.form.email}))

				} catch (errors) {
					this.loading = false;
					(errors) ? this.setErrors(errors) : this.clearErrors()
				}
			},
            setErrors(errors) {
				this.error.email = errors.email ? errors.email[0] : null;
			},
			clearErrors() {
				this.error.email = null;
			}
			
		},
	}
</script>
